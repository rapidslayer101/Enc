import os, time, re
from base64 import b64decode
from zlib import decompress
from datetime import datetime


def b64echeck(master_key):
    while True:
        if len(master_key) % 4 == 0:
            break
        else:
            master_key = master_key + "="
    return master_key


def clear(): os.system('cls')


def warn(text):
    print(f"[!] [{date_now()}] {text}")


def search(data, filter_fr, filter_to):
    data = str(data)
    m = re.search(f"""{filter_fr}(.+?){filter_to}""", data)
    if m:
        output = m.group(1)
    else:
        output = None
    return output


def new_key(master_key):
    def key_test(master_key):
        alphalen = len(master_key)//3

        p0_alpha = master_key[:alphalen]
        p1_key = master_key[alphalen:alphalen*2]
        p1_e = master_key[alphalen*2:alphalen*2+1]
        p3_alpha = master_key[alphalen*2+2:]

        print(p1_e)
        print(p1_key)

        def mkey_to_num(alpha, e):
            conversion_table = {}
            cvtable_counter = 0
            for i in alpha:
                conversion_table.__setitem__(i, cvtable_counter)
                cvtable_counter = cvtable_counter + 1

            hexadecimal = e.strip().upper()
            decimal = 0

            power = len(hexadecimal) - 1

            for digit in hexadecimal:
                decimal += conversion_table[digit] * alphalen ** power
                power -= 1

            return decimal

        num1 = mkey_to_num(alpha=p1_key, e=p1_e)

        return num1, p0_alpha, p3_alpha, alphalen

    master_key = decompress(b64decode(b64echeck(master_key))).decode('utf-8')
    key_data = key_test(master_key)

    alphalen = key_data[3]
    old_key = master_key[alphalen:]

    p1_key = old_key[:alphalen]
    p1_e = old_key[alphalen:alphalen+1]

    def mkey_to_num(alpha, e):
        conversion_table = {}
        cvtable_counter = 0
        for i in alpha:
            conversion_table.__setitem__(i, cvtable_counter)
            cvtable_counter = cvtable_counter + 1

        hexadecimal = e.strip().upper()
        decimal = 0

        power = len(hexadecimal) - 1

        for digit in hexadecimal:
            decimal += conversion_table[digit] * alphalen ** power
            power -= 1

        return decimal

    num1 = mkey_to_num(alpha=p1_key, e=p1_e)

    p0_alpha = key_data[1]
    p3_alpha = key_data[2]

    with open("enc-num.txt", "w", encoding="utf-8") as f:
        f.write(f"{num1}")

    with open("enc-alpha.txt", "w", encoding="utf-8") as f:
        f.write(f"{p0_alpha}{p3_alpha}")

    return alphalen


alphalen = new_key(input("Input key:\n"))


def decrypt(enc_text):
    try:
        with open("enc-num.txt") as f:
            num2 = int(str(f.readlines())[2:-2])

        with open("enc-alpha.txt", encoding="utf-8") as f:
            for line in f.readlines():
                alpha1 = line[:alphalen]
                alpha2 = line[alphalen:]

        def fib_iter():
            a = 1
            b = 1
            c = 1
            while len(str(b)) < len(enc_text)*2:
                total = (a + b * num2) * c
                c = b
                b = a
                a = total
            return b

        b = str(fib_iter())

        counter = 0
        outputend = ""
        for letter in enc_text:
            counter = counter + 2
            alphabet = alpha2
            msg = letter
            if msg in alphabet:
                key = b[counter:counter + 2]
                key = int(key)
                if key > alphalen:
                    key = num2
                key = key - key - key
                if key == 0:
                    newAlphabet = alphabet
                elif key > 0:
                    partialOne = alphabet[:key]
                    partialTwo = alphabet[key:]
                    newAlphabet = partialTwo + partialOne
                else:
                    partialOne = alphabet[:(alphalen + key)]
                    partialTwo = alphabet[(alphalen + key):]
                    newAlphabet = partialTwo + partialOne
                encrypted = ""
                for message_index in range(0, len(msg)):
                    if msg[message_index] == " ":
                        encrypted += " "
                    for alphabet_index in range(0, len(newAlphabet)):
                        if msg[message_index] == alphabet[alphabet_index]:
                            encrypted += newAlphabet[alphabet_index]
                outputend = outputend + encrypted
            else:
                outputend = outputend + msg

        dtext = outputend

        counter = 0
        for i in dtext:
            counter = counter + 1
        content = str(dtext[:6]).replace("g", "0").replace("e", "1").replace("k", "2").replace("i", "3") \
            .replace("u", "4").replace("d", "5").replace("r", "6").replace("w", "7").replace("q", "8").replace("p", "9")

        def get_prime_number():
            prime_numbers = []
            candidate = int(content)
            while True:
                if candidate <= 3:
                    prime_numbers.append(candidate)
                    yield candidate

                is_prime = True
                for prime_num in prime_numbers:
                    if candidate % prime_num == 0:
                        is_prime = False
                        break

                if is_prime:
                    prime_numbers.append(candidate)
                    yield candidate

                candidate += 1

        prime_numbers = get_prime_number()
        while True:
            x = next(prime_numbers)
            if x == int(content):
                num = x
                break
        newnum = ""
        for i in range(counter):
            newnum = str(newnum) + str(next(prime_numbers))
        counter = 0
        outputend = ""
        for letter in dtext[6:]:
            counter = counter + 2
            alphabet = alpha1
            msg = letter
            if msg in alphabet:
                key = newnum[counter:counter + 2]
                key = int(key)
                if key > alphalen:
                    key = num2
                key = key - key - key
                if key == 0:
                    newAlphabet = alphabet
                elif key > 0:
                    partialOne = alphabet[:key]
                    partialTwo = alphabet[key:]
                    newAlphabet = partialTwo + partialOne
                else:
                    partialOne = alphabet[:(alphalen + key)]
                    partialTwo = alphabet[(alphalen + key):]
                    newAlphabet = partialTwo + partialOne
                encrypted = ""
                for message_index in range(0, len(msg)):
                    if msg[message_index] == " ":
                        encrypted += " "
                    for alphabet_index in range(0, len(newAlphabet)):
                        if msg[message_index] == alphabet[alphabet_index]:
                            encrypted += newAlphabet[alphabet_index]
                outputend = outputend + encrypted
            else:
                outputend = outputend + msg

        return decompress(b64decode(b64echeck(outputend))).decode('utf-8')
    except:
        return "[CND] " + enc_text

clear()


message_history = []


def history_print(text):
    print(text)
    message_history.append(text)


def date_now():
    return datetime.now().strftime('%d-%m-%Y %H:%M:%S')


print("loop entered")
while True:
    allow_send = 1
    exiter = 0
    to_send = ": " + input()
    if to_send == ": ":
        warn("You cannot send an empty message!")
        allow_send = 0

    with open("last_sent.txt", "w") as f:
        f.write(str(datetime.utcnow()))

    if "-CANCEL" in to_send:
        to_send = f" [MSG CANCELLED]"
    if len(to_send) > 2000:
        warn("Your message is over the 10000 char limit, send a shorter message!")
    else:

        if to_send.lower() == ': -quit':
            exiter = 1
            to_send = " [QUIT]"

        if to_send.lower() == ': -change mkey':
            warn("changing this key means you wont be able to read any messages from the server"
                 " or any client that has not entered this key. To reset this you will need to reopen your client")
            new_mkey = input("Input new mkey: ")
            to_send = f" [CHANGE MKEY]"
            try:
                new_key(new_mkey)
            except:
                warn("The key you entered is not valid")

    if exiter == 1:
        time.sleep(5)
        break

    if allow_send == 1:
        text = to_send[2:]
        text = decrypt(text)
        print(text)


