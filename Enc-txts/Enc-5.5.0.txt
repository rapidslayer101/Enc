import base64, zlib, os, re, time, datetime, random, sys
from colorama import init
from base64 import b85decode
from zlib import decompress

start_time = time.time()
def date_now(): return datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')


def clear(): os.system('cls')


global history_data
history_data = [f"[{date_now()}] [RT {round(time.time() - start_time, 2)}s] Reading and checking settings"]


def config_key_to_settings(c_key):
    c_key = decompress(b85decode(c_key)).decode('utf-8').split("ðŸ¶˜")
    hex_head, hex_tail = c_key[0].split(" ")
    hexlen = random.randint(int(hex_head), int(hex_tail))
    alphagen = c_key[1]
    key_p1_head, key_p1_tail = c_key[2].split(" ")
    key_p1 = random.randint(int(key_p1_head), int(key_p1_tail))
    return hexlen, alphagen, key_p1


init()
er = "\033[31m"  # error
wn = "\033[33m"  # warn
pa = "\033[32m"  # pass
se = "\033[36m"  # input
su = "\033[34m"  # input option
rs = "\033[0m"  # reset

try:
    with open("enc-config-key.txt", encoding="utf-8") as f:
        config_key = str(f.readlines())[2:-2]
    settings = config_key_to_settings(config_key)
    hexlen = settings[0]
    alphagens = settings[1]
    alphalen = len(alphagens)
    key_p1 = settings[2]
    print("TYPE 1 KEY LOADED")
except:
    print("The 3 keys:\nType 1 - Settings key - Contains key generator settings\n"
          "Type 2 - Settings key and Encrypt key - Key generator settings and an encryption key\n"
          f"Type 3 - Encrypt key - An encryption key\n\n{se}If you have a type 1 or 2 key to enter then enter it now{rs}")
    key_type = input(" > ")
    # type 1
    try:
        settings = config_key_to_settings(key_type)
        hexlen = settings[0]
        alphagens = settings[1]
        alphalen = len(alphagens)
        key_p1 = settings[2]
        with open("enc-config-key.txt", "w", encoding="utf-8") as f:
                f.write(key_type)
        config_key = key_type
        print("TYPE 1 KEY ACCEPTED")
    except:
        while True:
            print(f"{se}Input charset, minimum of 35 unique, {su}to use suggested charset leave blank{rs}")
            while True:
                alphagens = input(" > ")
                if alphagens == "":
                    alphagens = "`1234567890-=Â¬!\"Â£$%^&*()_+qwertyuiop[]QWERTYUIOP{}asdfghjkl;" \
                                "'#ASDFGHJKL:@~\zxcvbnm,.|ZXCVBNM<>?/"
                    break
                else:
                    clear()
                    if len(alphagens) < 35:
                        print(f"{er}This charset does not meet the minimum 35 char requirement{rs}")
                        print(f"Add {wn}{35 - len(alphagens)}{rs} more chars to meet requirement,"
                              f" or {pa}{85 - len(alphagens)}{rs} to meet recommendation")
                    if len(alphagens) > 34:
                        from collections import Counter

                        freq = Counter(alphagens)
                        if len(freq) == len(alphagens):
                            if len(alphagens) < 85:
                                print(f"{wn}This charset does not meet the minimum 85 char recommendation, "
                                      f"do you still want to proceed? y/n{rs}")
                                alphagen_proceed = input(" > ")
                                if alphagen_proceed.lower() == "y":
                                    f.write(alphagens)
                                    break
                            else:
                                f.write(alphagens)
                                break
                        else:
                            print(f"{er}This charsets characters are not unique{rs}")

            print(f"{se}Hexlen settings, min 2, max of {len(alphagens)}, use 4 and 5 for optimal key outcome size, "
                  f"{su}to use optimal settings leave blank{rs}")
            hexlen_fr = input(" > ")
            if hexlen_fr == "":
                hexlen_fr = 4
                hexlen_to = 5
            else:
                hexlen_to = input(f" > ")

            print(f"{se}Key_p1 settings, limit of 9215, use 9000 as standard limit,"
                  f" {su}to use recommended leave blank{rs}")
            key_p1_fr = input(" > ")
            if key_p1_fr == "":
                key_p1_fr = 100
                key_p1_to = 9000
            else:
                key_p1_to = input(f" > ")

            config_key = f"{hexlen_fr} {hexlen_to}ðŸ¶˜{alphagens}ðŸ¶˜{key_p1_fr} {key_p1_to}"
            config_key = base64.b85encode(zlib.compress(config_key.encode('utf-8'), 9)).decode('utf-8')
            settings = config_key_to_settings(config_key)
            hexlen = settings[0]
            alphagens = settings[1]
            key_p1 = settings[2]
            alphalen = len(alphagens)

            if hexlen > alphalen:
                print(f"{er}The hexlen value is to large, there is a max of {wn}{alphalen}{er} for this setup{rs}")
                exit()

            if hexlen < 2:
                print(f"{er}The hexlen value is to small, the minimum is {wn}2{rs}")
                exit()

            with open("enc-config-key.txt", "w", encoding="utf-8") as f:
                f.write(config_key)

            print("TYPE 1 KEY GENERATED")
            break


history_data.append(f"[{date_now()}] [RT {round(time.time()-start_time,2)}s] Defining")  # DEFINING BELOW


class history():
    def add(self, append): history_data.append(f"[{date_now()}] [RT {round(time.time()-start_time,2)}s] {append}")

    def print(self, amount):
        clear()
        if amount.lower() == "all":
            for item in history_data:
                print(item)
        else:
            time.sleep(0.01)
            while len(history_data) > int(amount):
                for item in history_data:
                    print(item)
                time.sleep(0.01)
                clear()
                history_data.pop(0)
            for item in history_data:
                print(item)

    def add_print(self, text, amount):
        history.add(0, text)
        history.print(0, amount)


def convert(m_key):
    try:
        m_key = decompress(b85decode(m_key)).decode('utf-8')
        p0_alpha = m_key[:alphalen]
        p1_key = m_key[alphalen:alphalen+hexlen]
        p1_e = m_key[alphalen+hexlen:-alphalen]
        p3_alpha = m_key[-alphalen:]

        conversion_table = {}
        cvtable_counter = 0
        for i in p1_key:
            conversion_table.__setitem__(i, cvtable_counter)
            cvtable_counter += 1

        hexadecimal = p1_e.strip().upper()
        num1 = 0
        power = len(hexadecimal) - 1

        for digit in hexadecimal:
            num1 += conversion_table[digit] * hexlen ** power
            power -= 1

        return p0_alpha, p3_alpha, num1
    except:
        os.startfile("F:/27-06-2021/PycharmProjects/ENC5/enc5.py")
        exit()


def generator():
    while True:
        run = 0
        while True:
            run += 1
            if run % 5 == 0 or run == 1:
                hexgens = ""
                while True:
                    hexgens_add = random.choice(alphagens)
                    if hexgens_add not in hexgens:
                        hexgens = hexgens + hexgens_add
                        if len(hexgens) == hexlen:
                            break
            try:
                rand_base_alpha = ''
                while True:
                    alpha_new_char = random.choice(hexgens)
                    if alpha_new_char not in rand_base_alpha:
                        rand_base_alpha = rand_base_alpha + alpha_new_char
                    elif len(rand_base_alpha) == hexlen:
                        break

                conversion_table = []
                for i in rand_base_alpha:
                    conversion_table.append(i)

                decimal = key_p1
                old_decimal = decimal
                hexadecimal = ''

                while decimal > 0:
                    remainder = decimal % hexlen
                    hexadecimal = conversion_table[remainder] + hexadecimal
                    decimal = decimal // hexlen

                conversion_table = {}
                cvtable_counter = 0
                for i in rand_base_alpha:
                    conversion_table.__setitem__(i, cvtable_counter)
                    cvtable_counter += 1

                hexadecimal = hexadecimal.strip().upper()
                decimal = 0
                power = len(hexadecimal) - 1

                for digit in hexadecimal:
                    decimal += conversion_table[digit] * hexlen ** power
                    power -= 1

                if decimal == old_decimal:
                    break
            except: xx = 0

        master_key = rand_base_alpha + hexadecimal
        p1_key = master_key[:hexlen]
        p1_e = master_key[hexlen:]

        conversion_table = {}
        cvtable_counter = 0
        for i in p1_key:
            conversion_table.__setitem__(i, cvtable_counter)
            cvtable_counter += 1

        hexadecimal = p1_e.strip().upper()
        num1 = 0

        power = len(hexadecimal) - 1

        for digit in hexadecimal:
            num1 += conversion_table[digit] * hexlen ** power
            power -= 1

        if num1 == key_p1:
            def alpha_make():
                rand_base_alpha = ''
                while True:
                    alpha_new_char = random.choice(alphagens)
                    if alpha_new_char not in rand_base_alpha:
                        rand_base_alpha = rand_base_alpha + alpha_new_char
                    elif len(rand_base_alpha) == alphalen:
                        break
                return rand_base_alpha

            rand_alpha1 = alpha_make()
            rand_alpha2 = alpha_make()

            master_key = rand_alpha1 + master_key + rand_alpha2
            master_key = base64.b85encode(zlib.compress(master_key.encode('utf-8'), 9)).decode('utf-8')
            break
    return master_key, num1, rand_alpha1, rand_alpha2


def shifter(plaintext, newnum, num, num2, alphabet, replace, forwards):
    output_enc = ""
    counter = 0
    for msg in plaintext:
        counter = counter + 2
        if msg in alphabet:
            key = int(newnum[counter:counter + 2])
            if key > alphalen:
                key = num2
            if not forwards:
                key = key - key - key
            if key == 0:
                new_alphabet = alphabet
            elif key > 0:
                new_alphabet = alphabet[key:] + alphabet[:key]
            else:
                new_alphabet = alphabet[(alphalen + key):] + alphabet[:(alphalen + key)]
            encrypted = ""
            for message_index in range(0, len(msg)):
                if msg[message_index] == " ":
                    encrypted += " "
                for alphabet_index in range(0, len(new_alphabet)):
                    if msg[message_index] == alphabet[alphabet_index]:
                        encrypted += new_alphabet[alphabet_index]
            output_enc = output_enc + encrypted
        else:
            #print(f"Ignored char: {msg}")
            output_enc = output_enc + msg

        if replace:
            num = str(num).replace("0", "g").replace("1", "e").replace("2", "k").replace("3", "i").replace("4", "u") \
                .replace("5", "d").replace("6", "r").replace("7", "w").replace("8", "q").replace("9", "p")
    if replace:
        return num + output_enc
    if not replace:
        return output_enc


def get_prime_number(candidate):
    prime_numbers_ = []
    while True:
        if candidate <= 3:
            prime_numbers_.append(candidate)
            yield candidate
        is_prime = True
        for prime_num in prime_numbers_:
            if candidate % prime_num == 0:
                is_prime = False
                break
        if is_prime:
            prime_numbers_.append(candidate)
            yield candidate
        candidate += 1


def fib_iter(text, num2, insert):
    a = 1
    b = 1
    c = 1
    last_update = time.time()
    while len(str(b)) < len(text) * 2:
        if time.time() - last_update > 0.1:
            history.print(0, "all")
            print(f"[{date_now()}] [RT {round(time.time() - start_time, 2)}s] Generating 1st {insert} shifters "
                  f"{round(len(str(b))/(len(text)*2)*100, 2)}%")
            last_update = time.time()
        total = (a + b * num2) * c
        c = b
        b = a
        a = total
    history.add_print(0, f"Generating {insert} shifters 100%", "all")
    return b


def shifter_gen_loop(etext, insert):
    newnum = ""
    run = 0
    last_update = time.time()
    while len(newnum) < len(etext) * 2 + 100:
        if time.time() - last_update > 0.1:
            history.print(0, "all")
            print(f"[{date_now()}] [RT {round(time.time() - start_time, 2)}s] "
                  f"Generating {insert} shifters "
                  f"{round(len(newnum) / (len(etext) * 2 + 100) * 100, 2)}%")
            last_update = time.time()
        run += 1
        newnum = str(newnum) + str(next(prime_numbers))
    history.add_print(0, f"Generating {insert} shifters 100%", "all")
    return newnum


def encrypt(plaintext, num2, alpha1, alpha2):
    plaintext = base64.b85encode(zlib.compress(plaintext.encode('utf-8'), 9)).decode('utf-8')
    try:
        global prime_numbers
        prime_numbers = get_prime_number(random.randint(100000, 800000))
        while True:
            if next(prime_numbers) > 100000:
                if random.randint(1, 150) == 1:
                    num = next(prime_numbers)
                    break

        newnum = shifter_gen_loop(plaintext, "1st encrypt")
        etext = shifter(plaintext, newnum, num, num2, alpha1, True, True)
        content = str(etext[:6]).replace("g", "0").replace("e", "1").replace("k", "2").replace("i", "3")\
        .replace("u", "4").replace("d", "5").replace("r", "6").replace("w", "7").replace("q", "8").replace("p", "9")

        prime_numbers = get_prime_number(int(content))
        while True:
            x = next(prime_numbers)
            if x == int(content):
                num = x
                break

        b = str(fib_iter(etext, num2, "2nd encrypt"))
        etext2 = shifter(etext, b, num, num2, alpha2, False, True)

        return etext2
    except:
        print("Encryption error")


def decrypt(enc_text, num2, alpha1, alpha2):
    try:
        b = str(fib_iter(enc_text, num2, "1st decrypt"))
        num = 0
        dtext = shifter(enc_text, b, num, num2, alpha2, False, False)
        content = str(dtext[:6]).replace("g", "0").replace("e", "1").replace("k", "2").replace("i", "3") \
            .replace("u", "4").replace("d", "5").replace("r", "6").replace("w", "7").replace("q", "8").replace("p", "9")

        prime_numbers = get_prime_number(int(content))
        while True:
            x = next(prime_numbers)
            if x == int(content):
                num = x
                break

        newnum = ""
        run = 0
        while len(newnum) < len(dtext) * 2 + 100:
            run += 1
            newnum = str(newnum) + str(next(prime_numbers))
            if run % 1000 == 0:
                print(run, len(dtext), len(str(newnum)))

        outputend = shifter(dtext[6:], newnum, num, num2, alpha1, False, False)

        return decompress(b85decode(outputend)).decode('utf-8')
    except:
        return "[CND] " + enc_text


## KEY OPTIONS

history.add_print(0, "Setup complete", "4")

try:
    with open("enc-key.txt", encoding="utf-8") as f:
        master_key = str(f.readlines())[2:-2]
except:
    print(f"{se}Input an encrypt key below, {su}leave blank to autogenerate a key{rs}")
    master_key = input(" > ")
    if not master_key == "":
        try:
            convert(master_key)
        except:
            print("key convert error")
    else:
        history.add_print(0, "Key not manually set, generating a new key", "1")
        key_data = generator()
        master_key = key_data[0]
        num1 = key_data[1]
        alpha1 = key_data[2]
        alpha2 = key_data[3]


# 1 more key missing, the settings + encryption key in one
history.add_print(0, f"\n\nENCRYPTION KEY:\n{master_key}\n\nSETTINGS KEY:\n{config_key}", "2")

# end gen segment


def search(data, filter_fr, filter_to):
    data = str(data)
    m = re.search(f"""{filter_fr}(.+?){filter_to}""", data)
    if m:
        output = m.group(1)
    else:
        output = None
    return output


with open("enc-key.txt", "w", encoding="utf-8") as f:
    f.write(master_key)

convert(master_key)

while True:
    allow_send = 1
    to_send = input("\nenc-5.0 > ")
    if to_send == "":
        print("You cannot send an empty message!")
        allow_send = 0

    if to_send.lower() == '-change mkey':
        print("changing this key means you wont be able to read any messages from the server"
             " or any client that has not entered this key. To reset this you will need to reopen your client")
        new_mkey = input("Input new mkey: ")
        try:
            convert(new_mkey)
            with open("enc-key.txt", "w", encoding="utf-8") as f:
                f.write(new_mkey)
        except:
            print("The key you entered is not valid")
        allow_send = 0

    if to_send.lower() == '-enc':
        os.startfile("F:/27-06-2021/PycharmProjects/ENC5/enc5.py")
        exit()

    if to_send.lower() == '-quit':
        exit()

    if allow_send == 1:
        with open("enc-key.txt") as f:
            for line in f.readlines():
                master_key = line
        mkey_data = convert(master_key)
        alpha1 = mkey_data[0]
        alpha2 = mkey_data[1]
        num2 = mkey_data[2]

        if not to_send.startswith("d "):
            if not to_send.startswith("e "):
                history.add_print(0, "Encrypt/Decrypt", "1")
                text1 = decrypt(to_send, num2, alpha1, alpha2)
                if not text1.startswith("[CND] "):
                    print(f"\nMessaged decrypts to: {text1}")
                else:
                    to_send = encrypt(to_send, num2, alpha1, alpha2)
                    print(f"\nMessaged encrypts to: {to_send}")

        try:
            if to_send.startswith("e "):
                history.add_print(0, "Encrypt", "1")
                to_send = encrypt(to_send, num2, alpha1, alpha2)
                print(f"\nMessaged encrypts to: {to_send}")

            if to_send.startswith("d "):
                history.add_print(0, "Decrypt", "1")
                bflntxt = len(to_send[2:])
                text1 = decrypt(to_send[2:], num2, alpha1, alpha2)
                if not text1.startswith("[CND] "):
                    print(f"\nMessaged decrypts to: {text1}")
                else:
                    print("\nMessage does not decrypt")
        except: xx = 0

# 1 char encryption broken
# random crash in convert function, line 184 issues restart patch for now

# all testers were removed from encrypt, don't seem needed
# have not yet made the 6 digit number in enc p1 be stored within m_key
